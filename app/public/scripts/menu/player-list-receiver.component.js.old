/* global AFRAME, NAF
 * This component reacts to messages from other users about the changing state of the menus. */
AFRAME.registerComponent('player-list-receiver', {
  schema: {
    playersList: {
      default: '',
      parse: function(value) {
        const parsedSet = new Set();
        value.split(',').forEach(v => parsedSet.add(v));
        return parsedSet;
      },
      stringify: function(set) {
        let stringifiedSet = "";
        set.forEach(v => stringifiedSet += v);
        return stringifiedSet;
      }
    },
    teamName: {
      default: '0'
    }
  },
  
  init: function() {
    this.updatePlayerList = this.updatePlayerList.bind(this);
    this.updatePlayerListHelper = this.updatePlayerListHelper.bind(this);
    this.el.addEventListener('joined-team', this.updatePlayerList);
  },
  
  // Updates the displayed list of players.
  // The namesObj parameter is an object with two fields: playerName and teamName - where
  // the playerName is the clientID.
  updatePlayerListHelper: function(namesObj) {
    const playerClassName = 'playername-display';
    let metadata = document.getElementById("player").getAttribute("metadata")

    if (this.data.teamName === namesObj.teamName) {
      // The player with the name `playerName` has been added to this player list
      this.data.playersList.add(namesObj.playerName);
      
      // Check if the added player is the current user and update the view if they are
      if (namesObj.playerName === metadata.username) {
        console.log("player-list-receiver")
        console.log(this.data.teamName)
        console.log(namesObj.teamName)

        let playerEl = document.getElementById("player");
        document.getElementById('head-hitbox').removeAttribute('body-position');
        document.getElementById('body').removeAttribute('body-position');
        // playerEl.removeAttribute('movement-controls');
        let navMesh = document.getElementById('navmesh-entity');
        let navParent = null;
        if (navMesh) {
          navParent = navMesh.parentNode;
          if (navParent) {
            navParent.removeChild(navMesh);
            console.log('removed navmesh');
          }
        }
        // playerEl.setAttribute('movement-controls', 'constrainToNavMesh', false);
        // playerEl.removeAttribute('movement-controls');

        const isTeamOne = namesObj.teamName === '1';

        // Update metadata: red team: #ff5147, blue team: #5985ff0
        playerEl.setAttribute("metadata", {team: parseInt(namesObj.teamName), color: (isTeamOne ? "#5985ff" : "#ff5147"), started: false});
        console.log('old position: ', playerEl.getAttribute('position').z.toString());

        // Move the player over to the other side of the field
        let zCoord = isTeamOne ? 4 : -4;
        playerEl.setAttribute('position', {x: 0, y: 0, z: zCoord});

        // Rotate the player to face the menu
        let pRotation = playerEl.getAttribute('rotation');
        pRotation.y = isTeamOne ? 0 : 180;
        playerEl.setAttribute('rotation', pRotation);

        // Rotate the menu to face the user
        let menuEl = document.getElementsByClassName('menu')[0];
        let mRotation = menuEl.getAttribute('rotation');
        mRotation.y = isTeamOne ? 180 : 0;
        menuEl.setAttribute('rotation', mRotation);

        const idToURL = id => document.getElementById(id).getAttribute('src');

        if (isTeamOne) {
          document.getElementById("avatar").childNodes[1].setAttribute("gltf-model", idToURL('head-blue'))
          document.getElementById("body").childNodes[1].setAttribute("gltf-model", idToURL('body-blue'))
          document.getElementById("rightHand").childNodes[1].setAttribute("gltf-model", idToURL('hand-blue'))
          document.getElementById("leftHand").childNodes[1].setAttribute("gltf-model", idToURL('hand-blue'))
        } else {
          document.getElementById("avatar").childNodes[1].setAttribute("gltf-model", idToURL('head-red'))
          document.getElementById("body").childNodes[1].setAttribute("gltf-model", idToURL('body-red'))
          document.getElementById("rightHand").childNodes[1].setAttribute("gltf-model", idToURL('hand-red'))
          document.getElementById("leftHand").childNodes[1].setAttribute("gltf-model", idToURL('hand-red'))
        }

        const enableConstraints = () => {
          if (navParent) {
            // navMesh.components['nav-mesh'].init();
            navMesh = document.createElement('a-entity');
            //<a-entity id="navmesh-entity" gltf-model="#navmesh" nav-mesh visible="true" position="0 0 0"></a-entity>
            navMesh.setAttribute('id', 'navmesh-entity');
            navMesh.setAttribute('gltf-model', '#navmesh');
            navMesh.setAttribute('nav-mesh');
            navMesh.setAttribute('visible', true);
            navMesh.setAttribute('position', {
              x: 0,
              y: 0,
              z: 2
            });

            navParent.appendChild(navMesh);
            console.log('updated navmesh');
          }
        };

        setTimeout(() => {
          // movement-controls="speed: 0.1; constrainToNavMesh: true; controls: checkpoint, gamepad, trackpad, touch, keyboard;"
          playerEl.setAttribute('movement-controls', {
            speed: 0.1,
            constrainToNavMesh: true,
            controls: ['checkpoint', 'gamepad', 'trackpad', 'touch', 'keyboard']
          });

          playerEl.components['movement-controls'].init();

          playerEl.setAttribute('movement-controls', 'constrainToNavMesh', true);
          console.log('updated attributes');
        }, 100);
        setTimeout(enableConstraints, 1000);

        setTimeout(() => {
          document.getElementById('head-hitbox').setAttribute('body-position', '');
          document.getElementById('body').setAttribute('body-position', '');
          console.log('added body-position component')
          console.log(document.getElementById('head-hitbox'));
        }, 1100);

        // playerEl.components['spawn-in-circle-team'].init();
        // playerEl.addAttribute('body-position');
      }
    } else {
      // The player with the name `playerName` has been removed from this player list (if they were previously on it).
      this.data.playersList.delete(namesObj.playerName);
    }
    
    // Update the DOM
    this.el.flushToDOM();
    
    // Remove all child elements first
    while (this.el.firstChild) {
      this.el.removeChild(this.el.firstChild);
    }
    
    // Add all names to the list of players
    let yCoord = 3;  // Starting height of the player name label

    if (!this.data.playersList.has(metadata.username)) {
      yCoord = 2;  // Lower the starting height to accomodate the join button
    }

    // Add each player's name back to the list.
    this.data.playersList.forEach(name => {
      if (name !== '') {
        // Add this name
        const nameDisplay = document.createElement('a-gui-label');
        nameDisplay.classList.add(playerClassName);
        nameDisplay.setAttribute('width', 2.5);
        nameDisplay.setAttribute('height', 0.5);
        nameDisplay.setAttribute('value', name);
        nameDisplay.setAttribute('opacity', 0);
        nameDisplay.setAttribute('background-color', '#000');
        nameDisplay.setAttribute('font-size', 0.23);
        nameDisplay.setAttribute('font-color', '#FFF');
        nameDisplay.setAttribute('line-height', 0.8);
        nameDisplay.setAttribute('letter-spacing', 0);
        nameDisplay.setAttribute('margin', '0 0 0.05 0');
        nameDisplay.setAttribute('position', {
          x: 0,
          y: yCoord,
          z: 0
        });
        nameDisplay.setAttribute('gui-item');
        
        yCoord -= 0.5;  // Add spacing between each text label
        
        this.el.appendChild(nameDisplay);
      }
    });
    
  },
  
  updatePlayerList: function(e) {
    this.updatePlayerListHelper(e.detail);
  },
  
  remove: function() {
    this.el.removeEventListener('joined-team', this.updatePlayerListSelf);
  }
});